openapi: 3.0.3
info:
  description: |
    The API for [Cron-Mon](https://github.com/howamith/cron-mon), which allows
    you to create, modify, and delete Monitors, as well as start and finish Jobs
    within those Monitors.
  version: 0.1.0
  title: Cron-Mon API
tags:
  - name: Monitors
    description: "Operations on monitors"
  - name: Jobs
    description: "Operations on Jobs"
servers:
  - url: /api/v1

paths:
  /monitors:
    get:
      tags:
        - Monitors
      summary: List monitors
      description: |
        Returns all monitors.
      responses:
        "200":
          description: |
            A list of Monitors, ordered alphabetically by Monitor name.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - paging
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/MonitorSummary"
                  paging:
                    $ref: "#/components/schemas/Paging"
              example:
                paging:
                  total: 2
                data:
                  - monitor_id: "cfe88463-5c04-4b43-b10f-1f508963cc5d"
                    name: "foo-backup.sh"
                    expected_duration: 1320
                    grace_duration: 300
                  - monitor_id: "e534a01a-4efe-4b8e-9b04-44a3c76b0462"
                    name: "analyse-bar.py"
                    expected_duration: 21600
                    grace_duration: 1800
        "400":
          $ref: "#/components/responses/BadInputError"
        "500":
          $ref: "#/components/responses/ServiceError"
    post:
      tags:
        - Monitors
      summary: "Create a new Monitor"
      requestBody:
        description: "The new Monitor to create."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MonitorInfo"
            example:
              name: "weekly-foobar"
              expected_duration: 43200
              grace_duration: 7200
      responses:
        "201":
          description: The newly created Monitor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Monitor"
              example:
                data:
                  monitor_id: "cfe88463-5c04-4b43-b10f-1f508963cc5d"
                  name: "weekly-foobar"
                  expected_duration: 43200
                  grace_duration: 7200
                  jobs: []
        "400":
          $ref: "#/components/responses/BadInputError"
        "500":
          $ref: "#/components/responses/ServiceError"

  /monitors/{monitor_id}:
    get:
      tags:
        - Monitors
      summary: "Retrieve a single Monitor"
      parameters:
        - in: path
          name: monitor_id
          description: "The ID of the Monitor to retrieve."
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: "The retrieved Monitor."
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Monitor"
              example:
                data:
                  monitor_id: "cfe88463-5c04-4b43-b10f-1f508963cc5d"
                  name: "foo-backup.sh"
                  expected_duration: 1320
                  grace_duration: 300
                  jobs:
                    - job_id: "c72be737-1089-4e10-9da3-0076f4d4123d"
                      start_time: "2024-03-31T20:54:00"
                      end_time: null
                      succeeded: null
                      output: null
                      duration: null
                      late: false
                      in_progress: true
                    - job_id: "68c71e5a-932f-4443-9b32-dd2e66381499"
                      start_time: "2024-03-31T12:35:00"
                      end_time: "2024-03-31T12:59:00"
                      succeeded: true
                      output: null
                      duration: 1440
                      late: false
                      in_progress: false
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/ServiceError"
    patch:
      tags:
        - Monitors
      summary: "Modify a Monitor"
      parameters:
        - in: path
          name: monitor_id
          description: "The ID of the Monitor to retrieve."
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: "The new Monitor information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MonitorInfo"
            example:
              name: "weekly-foobar"
              expected_duration: 43200
              grace_duration: 7200
      responses:
        "200":
          description: "The retrieved Monitor."
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Monitor"
              example:
                data:
                  monitor_id: "cfe88463-5c04-4b43-b10f-1f508963cc5d"
                  name: "foo-backup.sh"
                  expected_duration: 1320
                  grace_duration: 300
                  jobs:
                    - job_id: "c72be737-1089-4e10-9da3-0076f4d4123d"
                      start_time: "2024-03-31T20:54:00"
                      end_time: null
                      succeeded: null
                      output: null
                      duration: null
                      late: false
                      in_progress: true
                    - job_id: "68c71e5a-932f-4443-9b32-dd2e66381499"
                      start_time: "2024-03-31T12:35:00"
                      end_time: "2024-03-31T12:59:00"
                      succeeded: true
                      output: null
                      duration: 1440
                      late: false
                      in_progress: false
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/ServiceError"
    delete:
      tags:
        - Monitors
      summary: "Delete a Monitor"
      parameters:
        - in: path
          name: monitor_id
          description: "The ID of the Monitor to retrieve."
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: "The Monitor was deleted."
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/ServiceError"

  /monitors/{monitor_id}/jobs/start:
    post:
      tags:
        - Jobs
      summary: "Start a Job within a Monitor"
      parameters:
        - in: path
          name: monitor_id
          description: "The ID of the Monitor the Job belongs to."
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: "A job was started."
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: object
                    required:
                      - job_id
                    properties:
                      job_id:
                        type: string
                        format: uuid
              example:
                data:
                  job_id: "c72be737-1089-4e10-9da3-0076f4d4123d"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/ServiceError"

  /monitors/{monitor_id}/jobs/{job_id}:
    get:
      tags:
        - Jobs
      summary: "Retrieve a single Job within a Monitor"
      parameters:
        - in: path
          name: monitor_id
          description: "The ID of the Monitor the Job belongs to."
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: job_id
          description: "The ID of the Job to retrieve."
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: "The retrieved Job within the Monitor."
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Job"
              example:
                data:
                  job_id: "c72be737-1089-4e10-9da3-0076f4d4123d"
                  start_time: "2024-03-31T20:54:00"
                  end_time: null
                  succeeded: null
                  output: null
                  duration: null
                  late: false
                  in_progress: true
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/ServiceError"

  /monitors/{monitor_id}/jobs/{job_id}/finish:
    post:
      tags:
        - Jobs
      summary: "Finish a Job within aMonitor"
      parameters:
        - in: path
          name: monitor_id
          description: "The ID of the Monitor the Job belongs to."
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: job_id
          description: "The ID of the Job to retrieve."
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: "Information about how the Job finished"
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - succeeded
              properties:
                succeeded:
                  type: boolean
                  description: "Whether or not the job finished successfully."
                output:
                  type: string
                  nullable: true
                  description: "Any output from the job"
            example:
              succeeded: true
              output: "Job finished"
      responses:
        "200":
          description: "Job finished successfully"
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Job"
              example:
                data:
                  job_id: "68c71e5a-932f-4443-9b32-dd2e66381499"
                  start_time: "2024-03-31T12:35:00"
                  end_time: "2024-03-31T12:59:00"
                  succeeded: true
                  output: "Job finished"
                  duration: 1440
                  late: false
                  in_progress: false

components:
  responses:
    BadInputError:
      description: "Bad input parameter"
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
          example:
            message: "Bad input"
    NotFoundError:
      description: "Item not found."
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
          example:
            message: "Not Found"
    ServiceError:
      description: |
        Something went wrong within the API. Details of which will be in
        `message`.
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
          example:
            message: "Something went wrong"
  schemas:
    Monitor:
      description: A cronjob monitor
      type: object
      required:
        - monitor_id
        - name
        - expected_duration
        - grace_duration
        - jobs
      properties:
        monitor_id:
          type: string
          format: uuid
          description: The unique identifier for the Monitor
        name:
          type: string
          description: The name of the Monitor
        expected_duration:
          type: integer
          format: uint32
          minimum: 0
          description: |
            The expected duration of the monitored job, in seconds. If the duration of a
            job exceeds this, it is considered _late_.
        grace_duration:
          type: integer
          format: uint32
          minimum: 0
          description: |
            The number of seconds _grace_ given to the job's duration. If the duration of
            a job exceeds `expected_duration` + `grace_duration` it is considered to have
            failed.
        jobs:
          type: array
          items:
            $ref: "#/components/schemas/Job"
    MonitorSummary:
      description: The summary of a cronjob monitor
      type: object
      required:
        - monitor_id
        - name
        - expected_duration
        - grace_duration
        - last_started_job
        - last_finished_job
      properties:
        monitor_id:
          type: string
          format: uuid
          description: The unique identifier for the Monitor
        name:
          type: string
          description: The name of the Monitor
        expected_duration:
          type: integer
          format: uint32
          minimum: 0
          description: |
            The expected duration of the monitored job, in seconds. If the duration of a
            job exceeds this, it is considered _late_.
        grace_duration:
          type: integer
          format: uint32
          minimum: 0
          description: |
            The number of seconds _grace_ given to the job's duration. If the duration of
            a job exceeds `expected_duration` + `grace_duration` it is considered to have
            failed.
        last_started_job:
          type: object
          oneOf:
            - $ref: "#/components/schemas/Job"
            - type: object
              nullable: true
          description: The last job that was started
        last_finished_job:
          type: object
          oneOf:
            - $ref: "#/components/schemas/Job"
            - type: object
              nullable: true
          description: The last job that finished
    Job:
      description: A monitored job
      type: object
      required:
        - job_id
        - start_time
        - end_time
        - succeeded
        - output
        - duration
        - late
        - in_progress
      properties:
        job_id:
          type: string
          format: uuid
          description: The ID of the job
        start_time:
          type: string
          format: date-time
          description: The time that the job started
        end_time:
          type: string
          format: date-time
          nullable: true
          description: The time that the job ended (unless it's still running)
        succeeded:
          type: boolean
          nullable: true
          description: Whether or not the job finished successfully (or `null` if it's still in progress).
        output:
          type: string
          nullable: true
          description: Any output that the job finished with (or `null` if it's still in progress).
        duration:
          type: integer
          format: int64
          minimum: 0
          nullable: true
          description: The number of seconds that the job ran for (or `null` if it's still in progress)
        late:
          type: boolean
          description: Whether or not the job is late.
        in_progress:
          type: boolean
          description: Whether or not the job is in progress.
    MonitorInfo:
      description: "Information required to create and modify Monitors"
      type: object
      required:
        - name
        - expected_duration
        - grace_duration
      properties:
        name:
          description: "The name of the Monitor"
          type: string
        expected_duration:
          description: "The expected duration of the monitored job, in seconds"
          type: integer
          format: int32
          minimum: 0
        grace_duration:
          description: "The numbers of seconds of grace to give to the jobs duration"
          type: integer
          format: int32
          minimum: 0
    Paging:
      description: "Pagination information"
      type: object
      required:
        - total
      properties:
        total:
          type: integer
          format: int32
          minimum: 0
          description: The total number of entities in the response.
