version: '3.7'
services:

  api:
    extends: base-rust
    container_name: cron-mon-api
    ports:
      - 8000:8000
    depends_on:
      db:
        condition: service_healthy
    command: cargo run --bin api
    networks:
      - default
      - rusty-network

  app:
    build:
      dockerfile: ./app/Dockerfile
      context: .
    container_name: cron-mon-app
    stdin_open: true
    tty: true
    volumes:
      - ./app:/usr/cron-mon/app
    ports:
      - 3000:3000
    command: npm run dev
    networks:
      - default
      - rusty-network

  monitor:
    extends: base-rust
    container_name: cron-mon-monitor
    depends_on:
      db:
        condition: service_healthy
    command: cargo run --bin monitor
    networks:
      - default
      - rusty-network

  integration-tests-rs:
    extends: base-rust
    container_name: rust-integration-tests
    depends_on:
      db:
        condition: service_healthy
      seeder:
        condition: service_completed_successfully
    command: cargo test --test integration_test
    networks:
      - default
      - rusty-network

  db:
    container_name: cron-mon-db
    image: public.ecr.aws/docker/library/postgres:16.1
    environment:
      POSTGRES_USER: cron-mon-api
      POSTGRES_PASSWORD: itsasecret
      POSTGRES_DB: cron-mon
    ports:
      - 54320:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    command: [
      "postgres",
      "-c",
      "log_statement=all"
    ]

  seeder:
    container_name: cron-mon-db-seeder
    build:
      dockerfile: ./api/src/infrastructure/seeding/Dockerfile
      context: .
    environment:
      PGHOST: cron-mon-db
      PGUSER: cron-mon-api
      PGPASSWORD: itsasecret
      PGDATABASE: cron-mon
    volumes:
      - ./api/src/infrastructure/seeding/seeds.sql:/usr/share/seeds.sql
    depends_on:
      db:
        condition: service_healthy
    command: psql -f /usr/share/seeds.sql

  base-rust:
    image: cron-mon/base-rust-image
    build:
      dockerfile: ./api/Dockerfile
      context: .
    stdin_open: true
    tty: true
    environment:
      DATABASE_URL: postgres://cron-mon-api:itsasecret@cron-mon-db/cron-mon
    volumes:
      - ./api:/usr/cron-mon/api

networks:
  rusty-network:
    driver: bridge
    name: rusty-network

volumes:
  postgres-data:
    name: cron-mon-postgres-data
