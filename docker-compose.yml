services:

  api:
    extends: rust-release
    container_name: cron-mon-api
    ports:
      - 8000:8000
    command: ./api
    networks:
      - default
      - cron-mon-network

  api-debug:
    extends: rust-cargo
    container_name: cron-mon-api-debug
    ports:
      - 8000:8000
    command: cargo run --bin api
    networks:
      - default
      - cron-mon-network

  monitor:
    extends: rust-release
    container_name: cron-mon-monitor
    command: ./monitor
    networks:
      - default
      - cron-mon-network

  monitor-debug:
    extends: rust-cargo
    container_name: cron-mon-monitor-debug
    command: cargo run --bin monitor
    networks:
      - default
      - cron-mon-network

  integration-tests-rs:
    extends: rust-cargo
    container_name: rust-integration-tests
    command: cargo test --no-fail-fast --jobs=5 --test "*" -- --test-threads=1
    networks:
      - default
      - cron-mon-network

  db:
    container_name: cron-mon-db
    image: public.ecr.aws/docker/library/postgres:16.1
    environment:
      POSTGRES_USER: cron-mon-api
      POSTGRES_PASSWORD: itsasecret
      POSTGRES_DB: cron-mon
    ports:
      - 54320:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    command: [ "postgres", "-c", "log_statement=all" ]

  keycloak:
    container_name: cron-mon-keycloak
    image: quay.io/keycloak/keycloak:25.0.2
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HEALTH_ENABLED: true
    ports:
      - 8080:8080
    volumes:
      - ./keycloak:/opt/keycloak/data/import
    networks:
      - default
      - cron-mon-network
    healthcheck:
      test: [
        "CMD-SHELL",
        "exec 3<>/dev/tcp/127.0.0.1/8080;\
        echo -e 'GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n' >&3;\
        if [ $? -eq 0 ]; then \
          echo 'Healthcheck Successful';\
          exit 0;\
        else \
          echo 'Healthcheck Failed'\
          exit 1;\
        fi;"
      ]
      interval: 5s
      timeout: 5s
      retries: 30
    command: ["start-dev", "--import-realm"]

  seeder:
    container_name: cron-mon-db-seeder
    build:
      dockerfile: ./api/src/infrastructure/seeding/Dockerfile
      context: .
    environment:
      PGHOST: cron-mon-db
      PGUSER: cron-mon-api
      PGPASSWORD: itsasecret
      PGDATABASE: cron-mon
    volumes:
      - ./api/src/infrastructure/seeding/seeds.sql:/usr/share/seeds.sql
    depends_on:
      db:
        condition: service_healthy
    command: psql -f /usr/share/seeds.sql

  rust-release:
    image: cron-mon/rust-release-image
    build:
      dockerfile: ./Dockerfile
      context: .
    stdin_open: true
    tty: true
    depends_on:
      db:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://cron-mon-api:itsasecret@cron-mon-db/cron-mon
      KEYCLOAK_CERTS_URL: http://cron-mon-keycloak:8080/realms/cron-mon-io/protocol/openid-connect/certs
      CARGO_HOME: /usr/cron-mon/.cargo
    volumes:
      - ./api:/usr/cron-mon/api

  rust-cargo:
    image: cron-mon/rust-cargo-image
    build:
      dockerfile: ./Dockerfile
      context: .
      target: builder
    stdin_open: true
    tty: true
    depends_on:
      db:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://cron-mon-api:itsasecret@cron-mon-db/cron-mon
      JSON_LOGGING: true
      KEYCLOAK_CERTS_URL: http://cron-mon-keycloak:8080/realms/cron-mon-io/protocol/openid-connect/certs
      CARGO_HOME: /usr/cron-mon/.cargo
    volumes:
      - ./api:/usr/cron-mon/api
      - /var/run/docker.sock:/var/run/docker.sock

networks:
  cron-mon-network:
    driver: bridge
    name: cron-mon-network

volumes:
  postgres-data:
    name: cron-mon-postgres-data
